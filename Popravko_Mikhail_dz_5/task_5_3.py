"""
4. Есть два списка:
tutors = [
    'Иван', 'Анастасия', 'Петр', 'Сергей',
    'Дмитрий', 'Борис', 'Елена'
]
klasses = [
    '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А'
]
Необходимо реализовать генератор, возвращающий кортежи вида (<tutor>, <klass>), например:
('Иван', '9А')
('Анастасия', '7В')
...
Количество генерируемых кортежей не должно быть больше длины списка tutors. Если в списке klasses меньше элементов,
чем в списке tutors, необходимо вывести последние кортежи в виде: (<tutor>, None), например:
('Станислав', None)
Доказать, что вы создали именно генератор. Проверить его работу вплоть до истощения.
Подумать, в каких ситуациях генератор даст эффект.
"""


def get_tutor_class(tutors, classes):
    for i in range(len(tutors)):
        yield tutors[i], classes[i] if i < len(classes) else None


tutors = [
    'Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена'
]

tutors_1 = [
    'Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена', 'Михаил', 'Станислав'
]

classes = [
    '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А'
]

tutor_class_gen = get_tutor_class(tutors, classes)
tutor_class_gen_1 = get_tutor_class(tutors_1, classes)

print(*tutor_class_gen)
print(*tutor_class_gen_1)  # чтобы проверить кортежи вида ('Tutor', None)

next(tutor_class_gen)  # тут будет будет StopIteration, что говорит о том, что генератор истощен
